# Notification Server Project Analysis

## Project Overview
A real-time notification server with WebSocket and HTTP API support, built with TypeScript, Express, and Redis. The system provides secure client management, channel-based notifications, and access control.

## Core Components

### 1. Server Architecture
- Express.js HTTP server for API endpoints
- WebSocket server for real-time communication
- Redis for pub/sub and data persistence
- TypeScript for type safety and better development experience

### 2. Key Services
- AccessControlService: Manages client IDs and channel access
- WebSocketManager: Handles WebSocket connections and subscriptions
- NotificationService: Manages notification publishing and history

### 3. API Endpoints

#### HTTP API
- Client Management:
  - POST /api/clients: Generate or validate client ID
  - GET /api/clients/{clientId}: Validate client ID
  - GET /api/clients/{clientId}/subscriptions: List client subscriptions
  - GET /api/clients/{clientId}/channels: List accessible channels
  - GET /api/clients/{clientId}/channels/{channel}: Check subscription status

- Channel Management:
  - POST /api/channels: Create new channel with access rules
  - POST /api/channels/{channel}/access/{clientId}: Grant channel access
  - DELETE /api/channels/{channel}/access/{clientId}: Revoke channel access
  - GET /api/channels/{channel}/subscribers: List channel subscribers

- Notification Management:
  - POST /api/notifications: Publish notification
  - GET /api/notifications/{channel}: Get notification history

#### WebSocket API
- Connection: ws://localhost:8080?clientId={clientId}
- Message Types:
  - subscription: Subscribe/unsubscribe to channels
  - notification: Real-time notifications
  - error: Error messages
  - connection: Connection status

### 4. Data Models

#### Redis Keys
- Client Keys: client:{clientId}
- Channel Keys: channel:{channel}
- Subscription Keys: 
  - client:{clientId}:subscriptions
  - channel:{channel}:subscribers
- Notification Keys: channel:{channel}:notifications

#### Message Types
- NotificationMessage: { type, data }
- SubscriptionRequest: { type, action, channel }
- PublishRequest: { channel, message }

### 5. Security Features
- Client ID validation and generation
- Channel access control lists (ACLs)
- WebSocket connection authentication
- Rate limiting (configurable)
- Channel pattern restrictions
- Client metadata tracking

### 6. Demo Client
- HTML/JavaScript based demo interface
- Environment variable configuration
- Real-time message display
- Channel management UI
- Subscription status tracking
- Client ID management

## Dependencies
- express: Web server framework
- ws: WebSocket server
- ioredis: Redis client
- dotenv: Environment variable management
- typescript: Type safety
- @types/*: Type definitions

## Configuration
- Environment variables in .env
- Redis connection settings
- WebSocket server settings
- Client ID expiration (7 days default)
- Channel access rules
- Rate limiting settings

## Development Setup
1. Install dependencies: npm install
2. Configure environment: .env
3. Start Redis server
4. Build TypeScript: npm run build
5. Start server: npm start
6. Access demo client: http://localhost:3000/demo

## Testing
- Manual testing via demo client
- WebSocket connection testing
- Channel subscription testing
- Notification publishing testing
- Access control testing
- Client ID validation testing

## Deployment Considerations
- Redis persistence configuration
- WebSocket load balancing
- Rate limiting settings
- Security headers
- Error handling
- Logging configuration
- Client ID expiration management
- Channel access control rules

## Future Enhancements
- Authentication system
- Message persistence
- Channel analytics
- Client monitoring
- API documentation
- Automated testing
- WebSocket reconnection handling
- Channel message retention policies
- Client metadata management
- Access control rule templates

## API Documentation
- OpenAPI specification (openapi.yaml)
- AsyncAPI specification (asyncapi.yaml)
- Demo client documentation
- API usage examples
- Error handling guidelines

## Security Best Practices
- Client ID validation
- Channel access control
- Rate limiting
- Input validation
- Error handling
- Logging and monitoring
- Secure WebSocket connections
- Redis security configuration

## Channel Management Endpoints

### Create Channel
- **Endpoint**: `POST /api/channels`
- **Description**: Creates a new channel with specified rules
- **Request Body**:
  ```json
  {
    "channel": "channel-name",
    "rules": {
      "isPublic": true,
      "allowedClientIds": ["client1", "client2"],
      "maxSubscribers": 100
    }
  }
  ```
- **Success Response**: 201 Created
  ```json
  {
    "channel": "channel-name",
    "rules": { ... }
  }
  ```
- **Error Responses**:
  - 400: Channel name is required
  - 409: Channel already exists
  - 500: Server error

### Delete Channel
- **Endpoint**: `DELETE /api/channels/:channel`
- **Description**: Deletes an existing channel and all its subscriptions
- **Success Response**: 200 OK
  ```json
  {
    "message": "Channel 'channel-name' deleted successfully",
    "channel": "channel-name"
  }
  ```
- **Error Responses**:
  - 400: Channel name is required
  - 404: Channel not found
  - 500: Server error 